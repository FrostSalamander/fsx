
// Entities

// Apartments multistate position entities
string POS_APT_FLOOR_0 = "pos_apt_floor0";
string POS_APT_FLOOR_1 = "pos_apt_floor1";

boolean isBindChildrenOpen(entity mover)
{
    float bindChildren = mover.numBindChildren();
    float i;

    for (i=0; i < bindChildren; i++)
    {
        entity bindChild = mover.getBindChild(i);
        sys.println(bindChild.getName());
        if (bindChild.IsOpen())
        {
            sys.println("bind child" + bindChild.getName() + " is open");Â¦
            return true;
        }
    }
    return false;
}

void controlLiftDoors(entity target, entity button, entity callscriptfunction)
{
    // The button that calls this is targeting the lift with 'target' spawnarg (i.e. not 'target0', 'target1', etc.)
    entity lift = button.getEntityKey("target");

    //sys.println("target is open: " + target.IsOpen());

    // Get the multistate position entity this button corresponds to
    // custom spawnarg: didn't want to use 'target' or 'position' because they activate unwanted functionality on some buttons
    entity multiStatePosition = button.getEntityKey("position_entity_name"); 

    // ensure the lift is idle and it's on the appropriate floor
    if ( !lift.isMoving() && (lift.getOrigin() == multiStatePosition.getOrigin()) )
    {
        if (target.IsOpen())
        {
            target.Close();
        }
        else
        {
            target.Open();
        }
    }
    else
    {
        sys.println("lift is on wrong floor or is moving");
    }
}




// main - keep at bottom
void main()
{
    sys.waitFrame();
}