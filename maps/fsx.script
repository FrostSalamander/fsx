
// GLOBALS
float JIMMY_SPAWNED = 0;
float COATES_SPAWNED = 0;

float BRYANT_LETTER_READ = 0;
float SHARPE_LETTER_READ = 0;
float ATKINSON_LETTER_READ = 0;

// Entities

// OBJECTIVES
float OBJ_KILL_COATES = 1;
float OBJ_SAFE_HOUSE = 2;
float OBJ_FREE_COOK = 3;
float OBJ_LEAVE_DAGGER = 4;
float OBJ_KILL_SHARPE = 12;

// Apartments multistate position entities
string POS_APT_FLOOR_0 = "pos_apt_floor0";
string POS_APT_FLOOR_1 = "pos_apt_floor1";

// Jimmy Cook objective state target
string TARGET_STATE_COOK = "target_set_cook_objective_state";

// Pop-up message entities
string DISABLE_PRISON_POPUP = "target_disable_prison_popup";
string TRIGGER_NEWSPAPER_POPUP = "trigger_newspaper_popup";
string POPUP_ELLA_BROACH = "popup_ella_broach";

// Triggers
string TRIGGER_ATKINSON_OBJECTIVE = "trigger_relay_atkinson_objective";
string TRIGGER_COUNT_FIREARROW = "trigger_count_firearrow";

// Coates teleport triggers
string TRIGGER_COATES_CHURCH = "trigger_coates_church";
string TRIGGER_COATES_HOTEL = "trigger_coates_hotel";
string TRIGGER_COATES_MANSION = "trigger_coates_mansion";

// Triggered when Coates is killed
string TRIGGER_SAFE_HOUSE = "trigger_safe_house";

// Locations
string LOCATION_ABBEY_LOFT = "location_abbey_loft";

boolean isBindChildrenOpen(entity mover)
{
    float bindChildren = mover.numBindChildren();
    float i;

    for (i=0; i < bindChildren; i++)
    {
        entity bindChild = mover.getBindChild(i);
        if (bindChild.IsOpen())
        {
            return true;
        }
    }
    return false;
}

void controlLiftDoors(entity target, entity button, entity callscriptfunction)
{
    // The button that calls this is targeting the lift with 'target' spawnarg (i.e. not 'target0', 'target1', etc.)
    entity lift = button.getEntityKey("target");

    // Get the multistate position entity this button corresponds to
    // custom spawnarg: didn't want to use 'target' or 'position' because they activate unwanted functionality on some buttons
    entity multiStatePosition = button.getEntityKey("position_entity_name"); 

    // ensure the lift is idle and it's on the appropriate floor
    if ( !lift.isMoving() && (lift.getOrigin() == multiStatePosition.getOrigin()) )
    {
        if (target.IsOpen())
        {
            target.Close();
        }
        else
        {
            target.Open();
        }
    }
}

entity spawnEntity(string origin, string rotation, string class)
{
    sys.setSpawnArg("origin", origin);
    sys.setSpawnArg("rotation", rotation);
    
    return sys.spawn(class);
}

// triggers a trigger relay, which in turn teleports Coates and sets his path node
void spawnCoates(string triggerName)
{
    if (!COATES_SPAWNED)
    {
        sys.trigger(sys.getEntity(triggerName));
        COATES_SPAWNED = 1;
    }
}

// Spawn Coates in the church
// Applies to the following zones:
//   - location_hotel_lobby (if entering from the lift or the storage room)
//   - location_hotel_back_hallway (if entering through back door via the warehouse)

void spawnCoatesChurch(entity oldZone)
{
    // spawns a fire arrow in the church.  Uses a trigger_count so the arrow is only spawned once.
    // Check if Coates is spawned first so the arrow doesn't get spawned if Coates gets spawned
    // somewhere else before the player enters the hotel.
    if (!COATES_SPAWNED)
    {
        sys.trigger(sys.getEntity(TRIGGER_COUNT_FIREARROW));
    }

    spawnCoates(TRIGGER_COATES_CHURCH);
}

// Spawn Coates in the Hotel
// Applies to the following zones:
//   - location_mansion_lounge
//   - location_mansion_pool_room
//   - location_mansion_groundfloor_entrance
//   - location_mansion_upstairs_lounge

void spawnCoatesHotel(entity oldZone)
{
    spawnCoates(TRIGGER_COATES_HOTEL);
}

// Spawn Coates in the Mansion
// Applies to the following zones:
//   - location_church_belfry_quarters

void spawnCoatesMansion(entity oldZone)
{
    spawnCoates(TRIGGER_COATES_MANSION);
}

boolean isObjectiveComplete(float objNum)
{
    return ($player1.getObjectiveState(objNum) == OBJ_COMPLETE);
}

boolean isObjectiveVisible(float objNum)
{
    return ($player1.getObjectiveVisible(objNum) == 1);
}

void triggerSafeHouseObjective()
{
    if (!isObjectiveVisible(OBJ_SAFE_HOUSE))
    {
        if (isObjectiveComplete(OBJ_KILL_COATES))
        {
            // The kill objective may have just displayed, so wait a bit until displaying the next one
            sys.wait(3);
            $player1.setObjectiveText(OBJ_SAFE_HOUSE, "Well done. Now check in at Lennard's safe house");
        }
        else
        {
            $player1.setObjectiveText(OBJ_SAFE_HOUSE, "Your mission has been exposed! Carry on with your objective, but check in at Lennard's safe house at some point for direction.");
        }

        // set the safe house objective visible
        $player1.setObjectiveVisible(OBJ_SAFE_HOUSE, 1);

        // Trigger teleport of prison key, safe house letter and newspaper into the safe house
        sys.trigger(sys.getEntity(TRIGGER_SAFE_HOUSE));
    }
    else
    {
        // If you've killed Coates but haven't yet been to the safe house, display a pop up if you read the newspaper.
        // Just gives 'some reaction' to seeing the news.

        // This scenario can happen if you start in Old Town and then eventually kill Coates in the hotel
        // before you get to The Review
        if (isObjectiveComplete(OBJ_KILL_COATES) && !isObjectiveComplete(OBJ_SAFE_HOUSE))
        {
            sys.trigger(sys.getEntity(TRIGGER_NEWSPAPER_POPUP));
        } 
    }
}

void completeSafeHouseObjective()
{
    // complete the 'get to the safe house' objective
    $player1.setObjectiveState(OBJ_SAFE_HOUSE, OBJ_COMPLETE);

    // disable the prison popup message
    sys.trigger(sys.getEntity(DISABLE_PRISON_POPUP));

    sys.wait(3);

    // make the 'free Cook' objectives visible
    $player1.setObjectiveVisible(OBJ_FREE_COOK, 1);
    $player1.setObjectiveVisible(OBJ_LEAVE_DAGGER, 1);
}

void frobMask(entity ent)
{
    // trigger relay that does various things
    sys.trigger($trigger_relay_demon_off);

    // respawn gregory ragdoll so it falls to the bed
    sys.spawn("fsx:ragdoll_gregory");

    // original frob action functionality
    frob_item(ent);

    // update location entity with new ambient settings
    entity abbeyLoft = sys.getEntity(LOCATION_ABBEY_LOFT);
    abbeyLoft.setKey("ambient", "snd_abbey");
    abbeyLoft.setKey("ambient_light", "0.04 0.04 0.04");
}

void frobAtkinson()
{
    sys.trigger(sys.getEntity(TRIGGER_ATKINSON_OBJECTIVE));
}

void frobBroach()
{
    sys.trigger(sys.getEntity(POPUP_ELLA_BROACH));
}


void spawnArrows()
{
    // spawn fire arrow in belfry
    spawnEntity("3384.7 3912 917.835", "-0.0495337 0 0.998772 0 1 0 -0.998772 0 -0.0495337", "atdm:ammo_firearrow");

    // spawn broadheads in Griffin the bell-ringer's bedroom
    sys.setSpawnArg("inv_ammo_amount", "5");
    spawnEntity("3474.24 3941.25 454.432", "-0.961595 0 -0.274472 0 1 0 0.274472 0 -0.961595", "atdm:ammo_broadhead");
}

void setSharpeObjectiveVisible()
{
    // The objective won't make much sense unless all the letters are read
    // and the player visits the crime scene
    if (BRYANT_LETTER_READ && SHARPE_LETTER_READ && ATKINSON_LETTER_READ)
    {
        $player1.setObjectiveVisible(OBJ_KILL_SHARPE, 1);
    }
}

void readBryantLetter()
{
    BRYANT_LETTER_READ = 1;
    setSharpeObjectiveVisible();
}

void readSharpeLetter()
{
    SHARPE_LETTER_READ = 1;
    setSharpeObjectiveVisible();
}

void readAtkinsonLetter()
{
    ATKINSON_LETTER_READ = 1;
    setSharpeObjectiveVisible();
}



// main - keep at bottom
void main()
{
    sys.waitFrame();
}