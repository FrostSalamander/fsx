
// GLOBALS
float JIMMY_SPAWNED = 0;
float COATES_SPAWNED = 0;

// Entities

// Apartments multistate position entities
string POS_APT_FLOOR_0 = "pos_apt_floor0";
string POS_APT_FLOOR_1 = "pos_apt_floor1";

boolean isBindChildrenOpen(entity mover)
{
    float bindChildren = mover.numBindChildren();
    float i;

    for (i=0; i < bindChildren; i++)
    {
        entity bindChild = mover.getBindChild(i);
        sys.println(bindChild.getName());
        if (bindChild.IsOpen())
        {
            sys.println("bind child" + bindChild.getName() + " is open");Â¦
            return true;
        }
    }
    return false;
}

void controlLiftDoors(entity target, entity button, entity callscriptfunction)
{
    // The button that calls this is targeting the lift with 'target' spawnarg (i.e. not 'target0', 'target1', etc.)
    entity lift = button.getEntityKey("target");

    // Get the multistate position entity this button corresponds to
    // custom spawnarg: didn't want to use 'target' or 'position' because they activate unwanted functionality on some buttons
    entity multiStatePosition = button.getEntityKey("position_entity_name"); 

    // ensure the lift is idle and it's on the appropriate floor
    if ( !lift.isMoving() && (lift.getOrigin() == multiStatePosition.getOrigin()) )
    {
        if (target.IsOpen())
        {
            target.Close();
        }
        else
        {
            target.Open();
        }
    }
    else
    {
        sys.println("lift is on wrong floor or is moving");
    }
}

void spawnAI(string origin, string target, string class)
{
    sys.setSpawnArg("origin", origin);

    // target their path_corner
    sys.setSpawnArg("target0", target);

    entity spawnedAI = sys.spawn(class);
}

void spawnEntity(string origin, string rotation, string class)
{
    sys.setSpawnArg("origin", origin);
    sys.setSpawnArg("rotation", rotation);
    
    entity ent = sys.spawn(class);
    //ent.setAngles(angle);
}

void spawnJimmy(string aiOrigin, string target, string letterOrigin)
{
    if (!JIMMY_SPAWNED)
    {
        sys.println("spawning Jimmy..."); // TODO: DEBUG_REMOVE
        spawnAI(aiOrigin, target, "fsx:ai_jimmy_cook");

        // spawn the letter
        spawnEntity(letterOrigin, "-0.341166 -0.940003 0 0.940003 -0.341166 0 0 0 1", "fsx:jimmy_letter");
        JIMMY_SPAWNED = 1;
    }
}

// Spawn Jimmy in an upper west cell
void spawnJimmyUpperWest()
{
    spawnJimmy("1904.16 3380.72 378.885", "path_corner_85", "1869.96 3272.06 404.007");
}

// Spawn Jimmy in a lower west cell
void spawnJimmyLowerWest()
{
    spawnJimmy("1896.16 3644.72 194.932", "path_corner_86", "1876.96 3508.05 220.007");
}

void spawnCoates(string origin, string target)
{
    if (!COATES_SPAWNED)
    {
        sys.println("spawning Coates..."); // TODO: DEBUG_REMOVE
        spawnAI(origin, target, "fsx:ai_vinton_coates");
        COATES_SPAWNED = 1;
    }
}

// Spawn Coates in the church
// Applies to the following zones:
//   - location_hotel_lobby

void spawnCoatesChurch(entity oldZone)
{
    spawnCoates("3408 4728 8.0669", "path_corner_111");
}

// Spawn Coates in the Hotel
// Applies to the following zones:
//   - location_mansion_lounge
//   - location_mansion_pool_room

void spawnCoatesHotel(entity oldZone)
{
    spawnCoates("1199.49 -42.5907 32.0669", "path_corner_18");
}

// Spawn Coates in the Mansion
// Applies to the following zones:
//   - location_church_belfry_quarters

void spawnCoatesMansion(entity oldZone)
{
    spawnCoates("400 4352 384.067", "path_wait_60");
}

// main - keep at bottom
void main()
{
    sys.waitFrame();
}